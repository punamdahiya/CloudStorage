<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!DOCTYPE bindings SYSTEM "chrome://browser/locale/downloads/downloads.dtd">

<!-- This binding is the same between FF45, FF46, FF47 -->

<bindings id="downloadBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

 <binding id="cloud-storage"
           extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
    <content orient="horizontal"
             onclick="DownloadsView.onDownloadClick(event);">
      <xul:hbox class="downloadMainArea"
                flex="1"
                align="center">
        <xul:stack>
          <xul:image class="downloadTypeIcon"
                     validate="always"
                     xbl:inherits="src=image,tooltiptext=displayName"/>
          <xul:image class="providerTypeIcon"/>
          <xul:image class="downloadBlockedBadge" />
        </xul:stack>
        <xul:vbox pack="center"
                  flex="1"
                  class="downloadContainer"
                  style="width: &downloadDetails.width;">
          <!-- We're letting localizers put a min-width in here primarily
               because of the downloads summary at the bottom of the list of
               download items. An element in the summary has the same min-width
               on a description, and we don't want the panel to change size if the
               summary isn't being displayed, so we ensure that items share the
               same minimum width.
               -->
          <xul:description class="downloadTarget"
                           crop="center"
                           style="min-width: &downloadsSummary.minWidth2;"
                           xbl:inherits="value=displayName,tooltiptext=displayName"/>
          <xul:progressmeter anonid="progressmeter"
                             class="downloadProgress"
                             min="0"
                             max="100"
                             xbl:inherits="mode=progressmode,value=progress,paused=progresspaused"/>
          <xul:description class="downloadDetails downloadDetailsNormal"
                           crop="end"
                           xbl:inherits="value=status"/>
          <xul:description class="downloadDetails downloadDetailsHover"
                           crop="end"
                           xbl:inherits="value=hoverStatus"/>
          <xul:description class="downloadDetails downloadDetailsFull"
                           crop="end"
                           xbl:inherits="value=fullStatus,tooltiptext=fullStatus"/>
          <xul:description class="downloadDetails downloadOpenFile"
                           crop="end"
                           value="&openFile.label;"/>
          <xul:description class="downloadDetails downloadShowMoreInfo"
                           crop="end"
                           value="&showMoreInformation.label;"/>
          <xul:stack class="downloadButtonLabels">
            <xul:description class="downloadDetails downloadShow"
                             crop="end"
                             value="&cmd.showMac.label;"
                             />
            <xul:description class="downloadDetails downloadCancel"
                             crop="end"
                             value="&cancelDownload.label;"/>
            <xul:description class="downloadDetails downloadRetry"
                             crop="end"
                             value="&retryDownload.label;"/>
          </xul:stack>
        </xul:vbox>
      </xul:hbox>
      <xul:toolbarseparator />
      <xul:stack class="downloadButtonArea">
        <xul:button class="downloadButton downloadCancel downloadIconCancel"
                    tooltiptext="&cmd.cancel.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_cancel');"/>
        <xul:button class="downloadButton downloadRetry downloadIconRetry"
                    tooltiptext="&cmd.retry.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_retry');"/>
        <xul:button class="downloadButton downloadShow downloadIconShow"
                    tooltiptext="&cmd.showMac.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_show');"/>
        <xul:button class="downloadButton downloadConfirmBlock downloadIconCancel"
                    tooltiptext="&cmd.removeFile.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_confirmBlock');"/>
        <xul:button class="downloadButton downloadChooseUnblock downloadIconShow"
                    tooltiptext="&cmd.chooseUnblock.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_chooseUnblock');"/>
        <xul:button class="downloadButton downloadChooseOpen downloadIconShow"
                    tooltiptext="&cmd.chooseOpen.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_chooseOpen');"/>
        <xul:button class="downloadButton downloadShowBlockedInfo"
                    tooltiptext="&cmd.chooseUnblock.label;"
                    oncommand="DownloadsView.onDownloadCommand(event, 'downloadsCmd_showBlockedInfo');"/>
      </xul:stack>
    </content>
    <implementation>
      <method name="checkProvider">
        <parameter name="provider"/>
        <body><![CDATA[
          let downloadTypeIcon = document.getAnonymousElementByAttribute(this, "class", "downloadTypeIcon");
          let src = downloadTypeIcon.getAttribute("src").toLowerCase();
          if (src.indexOf(provider) >= 0) {
            return provider;
          }
        ]]></body>
      </method>
      <constructor><![CDATA[
        // Read the src path from download type icon
        // e.g. moz-icon:///<home>/dropbox/downloads/test.png?size=32&state=normal
        // and use it to highlight respective downloaded item with storage provider icon

        let providerElem = document.getAnonymousElementByAttribute(this, "class", "providerTypeIcon");
        let providers = ["dropbox", "google drive"];

        // find first element in the providers array that satisfies method checkProvider
        let result = providers.find(checkProvider, this);
        if (result) {
          let storageIconSrc = "chrome://cloud/skin/" + result + "_18x18.png";
          providerElem.setAttribute("src", storageIconSrc);
        }
      ]]></constructor>
    </implementation>
  </binding>
   
</bindings>
